{"pages":[{"title":"Categories","date":"2019-02-06T02:53:57.077Z","path":"categories/index.html","text":""},{"title":"About","date":"2019-02-06T02:53:57.077Z","path":"about/index.html","text":"佛曰：不可说"},{"title":"Tags","date":"2019-02-06T02:53:57.079Z","path":"tags/index.html","text":""}],"posts":[{"title":"Hello World","date":"2019-02-06T02:53:57.076Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]},{"title":"How To Open A Port In CentOS 7 With Firewalld","date":"2018-12-16T16:00:00.000Z","path":"wiki/软件开发/linux/How To Open A Port In CentOS 7 With Firewalld/","text":"This tutorial will walk you through opening a port in the default firewall in CentOS 7, firewalld. You will see that while we can manually open a specific port, it is often easier and beneficial to allow based on predefined services instead. Open Specific PortOpening a port in firewalld is fairly straightforward, in the below example we allow traffic in from any source IP address to TCP port 100. First we modify the persistent configuration, then we reload firewall-cmd to load this change into the running configuration.1234[root@centos7 ~]# firewall-cmd --permanent --add-port=100/tcpsuccess[root@centos7 ~]# firewall-cmd --reloadsuccess If the –permanent flag is not specified, this will only change the running configuration but will not be saved. We can check the ports that are opened in the current default zone with ‘–list-ports’.12[root@centos7 ~]# firewall-cmd --list-ports100/tcp As expected we see that TCP port 100 is open. Should we wish to remove a port, we can use ‘–remove-port=’ instead. We can also open a range of ports in the same way.12[root@centos7 ~]# firewall-cmd --permanent --add-port=200-300/tcpsuccess Open Predefined ServiceRather than manually specifying a port number to allow through the firewall, we can make use of a bunch of predefined services which may be easier. For example instead of opening TCP port 80, we can use the ‘http’ service. 1234[root@centos7 ~]# firewall-cmd --permanent --add-service=httpsuccess[root@centos7 ~]# firewall-cmd --reloadsuccess Now if we list the services that are accepted through the firewall, we will see http listed along with ssh and dhcpv6-client, which are allowed through by default.12[root@centos7 ~]# firewall-cmd --list-servicesdhcpv6-client http ssh This is a predefined service and can be found as an XML file in the /usr/lib/firewalld/services/ directory. Here’s what the http service we just used looks like. 1234567[root@centos7 ~]# cat /usr/lib/firewalld/services/http.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;service&gt; &lt;short&gt;WWW (HTTP)&lt;/short&gt; &lt;description&gt;HTTP is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. This option is not required for viewing pages locally or developing Web pages.&lt;/description&gt; &lt;port protocol=\"tcp\" port=\"80\"/&gt;&lt;/service&gt; We can create custom services by copying one of these into the /etc/firewalld/services/ directory and then customizing it. The services in the /usr/lib/firewalld/services/ directory should NOT be modified, changes should be copied into /etc/firewalld/services/ followed by a reload of firewall-cmd to pick up the changes. Services Or Manual Ports?Why would we want to use services if we can just specify the port? Modules can be specified in a service, for example samba.xml loads the module “nf_conntrack_netbios_ns” for us when it’s enabled, along with four different ports which is a lot easier than doing all of this ourselves as we don’t need to memorize all of the ports required for a service. Still not a fan of firewalld? Don’t worry, you can always install ifconfig in CentOS 7 instead, however note that this is considered deprecated. SummaryWe have seen that the firewall in CentOS 7 can be modified to open a specific port, or more preferably we can open it to a service. While these basic examples demonstrate opening a port to any source, this is usually not desirable. We can further filter based on source traffic with firewalld rich rules.","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]},{"title":"Jenkins开机启动","date":"2018-10-18T12:30:00.000Z","path":"wiki/软件开发/devops/Jenkins开机启动/","text":"使用 jenkins 最简单的方式即使用 war 包进行启动，war 包中带了 jetty 服务，可以直接 java -jar jenkins.war 启动使用。但每次都使用命令相当繁琐，本编即介绍如何将此步骤设置于开机启动。 1. 环境准备 Linux CentOs 7.3 下载 Jre 1.8.0下载 Jenkins 2.138.2下载 2. 编写 linux 开机自运行脚本 jenkins.sh 将该脚本加入chkconfig启动项目中，开机时运行。 JENKINS_ROOT: jenkins软件目录 JENKINS_HOME: jenkins主目录 12345678910111213141516171819202122232425262728293031323334353637#!/bin/sh#chkconfig: 2345 80 90#description:开机启动jenkins服务JENKINS_ROOT=/usr/local/jenkinsJENKINSFILENAME=jenkins.war#停止方法stop()&#123; echo \"Stoping $JENKINSFILENAME \" ps -ef|grep $JENKINSFILENAME |awk '&#123;print $2&#125;'|while read pid do kill -9 $pid echo \" $pid kill\" done&#125;case \"$1\" instart) echo \"Starting $JENKINSFILENAME \" nohup $JENKINS_ROOT/start_jenkins.sh &gt;&gt; $JENKINS_ROOT/jenkins.log 2&gt;&amp;1 &amp; ;;stop) stop ;;restart) stop start ;;status) ps -ef|grep $JENKINSFILENAME ;;*) printf 'Usage: %s &#123;start|stop|restart|status&#125;\\n' \"$prog\" exit 1 ;;esac 3. 编写启动 war 包命令 start_jenkins.sh 启动war包的命令，由于在启动时需要使用java命令，所以在脚本中加入了java的bin路径。 12345#!/bin/bashJENKINS_ROOT=/usr/local/jenkinsexport JENKINS_HOME=$JENKINS_ROOT/homeJAVA_HOME=/usr/local/java/jre1.8.0_151 PATH=$PATH:$JAVA_HOME/binjava -jar $JENKINS_ROOT/jenkins.war --httpPort=8080 4. 加入 chkconifg 启动项目123456789# 赋予执行权限chmod +x /usr/local/jenkins/jenkins.sh# 创建软链接到 init.d 目录ln -s /usr/local/jenkins/jenkins.sh /etc/rc.d/init.d/jenkins# 添加到 chkconfigchkconfig --add jenkinschkconfig --level 345 jenkins on 5. 启动jenkins服务1/etc/rc.d/init.d/jenkins start 到此已经可以在启动服务器时自动运行jenkins了，端口占用8080.","tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://joecnn.github.io/wiki-site/tags/jenkins/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"}]},{"title":"添加开机运行脚本","date":"2018-10-17T16:00:00.000Z","path":"wiki/软件开发/linux/添加开机运行脚本/","text":"Linux 设置开机自动启动的方式有好多种，这里介绍一种通过 chkconfig 命令添加脚本为开机启动的方法。 1. 编写脚本 autostart.sh123456#!/bin/sh#chkconfig: 2345 80 90#description: 开机自动运行脚本# 开启redis服务 端口为6379/usr/local/service/redis-2.8.3/src/redis-server --port 6379 &amp; 脚本第二行表示在 2/3/4/5运行级别启动，启动序号80，关闭序号90 2. 赋予脚本执行权限1chmod +x /usr/local/service/redis-2.8.3/autostart.sh 3. 创建软链接到 init.d 目录下1ln -s /usr/local/service/redis-2.8.3/autostart.sh /etc/rc.d/init.d/redis 4. 添加到开机启动项中12chkconfig -add redischkconfig redis on 到这里已经将脚本添加到开机启动项中，重启服务器即可看到redis服务已经启动了。","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]},{"title":"Jenkins持续编译","date":"2018-10-17T13:00:00.000Z","path":"wiki/软件开发/devops/Jenkins持续编译/","text":"Jenkins 是一个开源自动化服务器，可用于自动化各种任务，如构建、测试和部署软件，本文档是结合Jenkins，Java，Maven，Github实现持续自动化编译。 1. 思路&amp;流程 安装 Java、Maven、Git、Jenkins 环境 配置 Jenkins 拉取 Github 项目 编译、单元测试 Maven 项目形成 war 包 2. 环境准备 由于 Maven 需要 jdk 支持，所以需要先配置 jdk 环境，再配置 maven 环境。 准备可联网的 Linux Centos 7.3 服务器 下载 Jdk1.8.0 并设置环境变量 下载 Maven3.3 并设置环境变量 安装 Git 3. 安装 Jenkins 可以设置 JENKINS_HOME 环境变量，改变 jenkins 启动生成文件存放位置.其它安装方式参考：Jenkins安装 首先从 Jenkins官方网站 下载最新的 war 包，只需运行命令： 1java -jar jenkins.war --httpPort=8080 Jenkins 服务就启动成功了，它的 war 包自带了 jetty 服务器，剩下的工作可以在浏览器内完成。 4. 配置 Jenkins首次进入 Jenkins 时，出于安全考虑， Jenkins 会自动生成一个随机口令，粘帖口令进入安装界面。进入 Jenkins 后选择 “Install suggested plugins“ 安装推荐插件，Jenkins 就自动配置好了 Maven、git 等常用插件。 在开始使用 Jenkins 创建项目前，需要在”系统管理“-&gt;”全局工具配置“中添加 JDK、Maven 设置：到此 Maven 项目的 Jenkins 已配置完成，下面开始创建构建任务。 5. 构建Maven项目在 Jenkins 首页选择”New 任务“，输入名字，选择”构建一个自由风格的软件项目“： 在配置页面中，”Source Code Management“ 选择 Git，填入地址，默认使用 mater 分支，如果为私人项目需要口令，在 Credentials 中添加用户名/口令： 在 “Build Triggers“ 中选择 “轮询 SCM“ 表示定时检查版本库，发现有新的提交就触发构建： 说明1：Triggerbuilds remotely(webhooks)这个选项就是配合 git 仓库的钩子功能实现代码 PUSH 后 Jenkins 收到通知自动触发构建项目的动作说明2：轮询 SCM定时检查源码变更，如果有更新就克隆下最新 code 下来，然后执行构建动作 在”Build“中可以添加编译命令，Maven默认的Root POM是pom.xml，如果pom.xml不在根目录下，则需要填入子目录： 说明1：选择之前添加的 maven 环境说明2：填入需要执行的 mvn 命令说明3：pom 不在根目录下，填入子目录 wxsell/pom.xml 保存后就可以”立即构建“，可以在”Console Output“中看到控制台详细输出： 6. 总结到此已配置了 Jenkins 自动编译任务，当 Github 上项目有变更时，会自动拉取项目进行编译，排除了可能不同机器上编译环境不同导致的影响。在完成持续编译后，可以结合 Jenkins 的编译后动作进行自动部署，实现持续部署功能。在下篇笔记中将会记录如何实现持续部署。","tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://joecnn.github.io/wiki-site/tags/jenkins/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"}]},{"title":"Docker镜像仓库加速","date":"2018-08-05T06:00:00.000Z","path":"wiki/软件开发/devops/docker/docker 镜像加速/","text":"docker 在默认安装后，当需要下载镜像时，通过命令docker pull user/image 拉取镜像都是访问默认的 docker hub 上的镜像，在国内网络环境下，下载一个镜像需要很长的时间，可以考虑使用 Registry Mirror 配置国内的镜像仓库。 使用由阿里云提供的 Docker 镜像仓库进行加速。 1. 登录阿里云 阿里云 Docker 镜像仓库 开启 Docker Hub 镜像站点 2. Windows 使用 Docker 加速 创建一台 docker machine 同时配置 docker 加速器 1docker-machine create --engine-registry-mirror=https://6bybmq21.mirror.aliyuncs.com -d virtualbox default 对于已经创建的 docker machine 实例，更换镜像源方法如下i. 在 window 命令执行 docker-machine ssh [machine-name] 进入 VM bashii. sudo vi /var/lib/boot2docker/profileiii. 在--label provider=virtualbox的添加一行 --registry-mirror https://xxx.mirror.aliyuncs.comiiii. 重启 docker 服务：sudo /etc/init.d/docker restart 或重启 VM ： docker-machine restart docker for windows 设置 Daemon Registry mirrors 查看 mirror 配置 123docker-machine env defaulteval &quot;$(docker-machine env default)&quot;docker info 3. CentOs 使用镜像加速 安装/升级 Docker 客户端 1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - 修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;&#123; &quot;registry-mirrors&quot;: [&quot;https://6bybmq21.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker","tags":[{"name":"docker","slug":"docker","permalink":"https://joecnn.github.io/wiki-site/tags/docker/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"docker","slug":"软件开发/devops/docker","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/docker/"}]},{"title":"Docker Start","date":"2018-08-05T04:30:00.000Z","path":"wiki/软件开发/devops/docker/docker start/","text":"1. Window10 下安装 Window10 下载最新的 Docker for windows 安装包进行安装 Windows10 下可以切换 Docker Platform 为 Linux 或者 Window，下载的镜像需要对应的平台支持。 Window10 下自带了虚拟器，需要开启 Hyper-V，在 控制面板-程序-打开Windows功能 中开启 Windows10 下的 Docker 使用虚拟机 IP 即为本机 127.0.0.1 ，可以在 CMD、PowerShell 中直接进行操作。 2. Windows7 下安装 Windows7 下在最新的 DockerToolBox 安装包进行安装DockerToolBox 会自动安装 Oracle Virtual Box 虚拟机，需要依托虚拟机进行启动。 2.1 创建 docker machine 安装完成后会附带 docker-machine.exe 使用此工具可以安装 docker 环境 查询 docker machine 1docker-machine ls 创建 default machine 使用 virtualbox 驱动模式，会自动下载 docker2boot.iso 镜像进行创建 virtualbox 虚拟机 1docker-machine create -d virtalbox default 查看 docker 信息 1docker-machine env default 管理 docker machine 1docker-machine -h 2.2 使用 putty 在 Windows 命令进入 Docker 后，shell 不能复制，操作不方便，因此使用支持 SSH 的工具来连接 docker 虚拟机。 查询 docker mechine ip： 在 docker machine env 中的 DOCKER_HOST 1docker-machine env default 使用 Putty 连接到 docker 终端： 默认用户名：docker 密码： tcuser PS：在 DockerToolBox 下自动安装的是 VirtualBox5.1，但是在启动 docker default mechine 时一直出错（VERR_SUPDRV_HARDENIGN_EVIL_HANDLE），经过查询是由于该版本的 vboxdrv 核心驱动请求过大的访问权限。。最后安装旧版的 VirtualBox4.3.12 后成功解决。 2.3 docker virtualbox 管理由于使用 docker-machine 创建的虚拟机默认路径为 /user/.docker/machine/ 下，可能在以后容器创建过多时占用系统盘资源。将 virtualbox 虚拟硬盘移动到其它盘。 复制 default vmdk 到指定路径 在指定盘进行复制一份 vmdk 为 default 虚拟机添加新的虚拟硬盘 添加新的虚拟硬盘后，删除原来的 disk.vmdk 文件即可 修改完成后，重启 docker machine 即可 参考资料： 白皮书：https://www.gitbook.com/book/yeasy/docker_practice/details 官方：https://www.docker.com/ 镜像库：https://hub.docker.com/","tags":[{"name":"docker","slug":"docker","permalink":"https://joecnn.github.io/wiki-site/tags/docker/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"docker","slug":"软件开发/devops/docker","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/docker/"}]},{"title":"Docker Mysql","date":"2018-03-07T13:30:00.000Z","path":"wiki/软件开发/devops/docker/docker mysql/","text":"docker mysql docker 下启动 mysql 实例步骤 1. 查询镜像 images123$ docker images$ docker search mysql$ docker pull mysql 2. 创建数据进行映射12$ mkdir -p /var/docker_data/mysql/data$ chmod 775 -R /var/docker_data/mysql 3. 运行容器1$ docker run -p 3306:3306 --name mysql-dev -v /var/docker_data/mysql/data/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=asdf123456 -e MYSQL_USER=root -d mysql 4. 验证是否已启动1$ docker ps","tags":[{"name":"docker","slug":"docker","permalink":"https://joecnn.github.io/wiki-site/tags/docker/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"docker","slug":"软件开发/devops/docker","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/docker/"}]},{"title":"Git介绍","date":"2017-12-25T16:00:00.000Z","path":"wiki/软件开发/devops/git/Git介绍/","text":"Git是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。 一、Git 特点直接记录快照，而非差异，只关心文件数据的整体是否发生变化，并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照 的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。 近乎所有操作都是本地执行Git 绝大多数操作都只访问本地文件和资源，因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。而到需要上传到远程仓库或获取远程仓库上内容时才需联网。 时刻保持数据完整性：Git 在保存前，所有数据都要进行校验计算，并将结果做为数据的唯一标识。 多数操作仅添加数据：Git 操作大多数仅仅是把数据添加到数据库，一旦提交快照就完全不用担心数据丢失。 二、Git 文件的三种状态 已提交(commited)：表示已被安全的保存到Git仓库中。 已修改(modified)：表示已修改了某个文件，但还未提交保存。 已暂存(staged)：表示已经把已修改的文件放到下次提交时要保存的清单中。 三、Git 工作流程 在工作目录中修改某些文件。 对修改后的文件进行快照，然后保存到暂存区域。 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中","tags":[{"name":"git","slug":"git","permalink":"https://joecnn.github.io/wiki-site/tags/git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"git","slug":"软件开发/devops/git","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/git/"}]},{"title":"Git安装","date":"2017-12-25T16:00:00.000Z","path":"wiki/软件开发/devops/git/Git安装/","text":"1. 从源码安装Git的工作需要调用 curl, zlib, openssl, expat, libconv 等库，所以需要先安装这些依赖工具。1$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 之后从Git官方站点下载源码：http://git-scm.com/download 进行编译安装：1234$ tar -zxf git-1.7.2.2.tar.gz $ cd git-1.7.2.2 $ make prefix=/usr/local all $ sudo make prefix=/usr/local install 2. 在 Linux 上安装如果要在 Linux 上安装预编译好的 Git 安装包，使用系统提供的包管理工具即可：12$ yum install git-core $ apt-get install git-core 3. 在 Mac 上安装在 Mac 上安装有两种方式，一种是下载 Git 安装工具，下载地址： http://git-scm.com/download/mac 另一种是通过 MacPorts 安装，用下面的命令安装：1$ sudo port install git-core +svn +doc +bash_completion +gitweb 4. 在 Windows 上安装在 Windows 上安装非常简单，只要下载 Git 安装工具，下载地址： http://git-scm.com/download/win 5. 初始配置一般在新的系统上，首先要配置 Git 的工作环境，Git 提供了 git config 的工具，用于配置和读取工作环境变量，这些变量可以存放在以下三个不同地方： /etc/gitconfig 文件：对系统中所有用户都适用，若使用 git config 时用 –system 选项，读写的就是这个文件。 ~/.gitconfig 文件：用户目录下仅用于用户，若使用 git config 时用 –global 选项，读写的就是这个文件。 当前项目的 git 目录中的配置文件：这里的配置仅仅对当前项目有效。每一个级别的配置都会覆盖上层的相同配置。 第一个要配置的是账户名称和邮箱地址：12$ git config --global user.name \"joecnn\" $ git config --global user.email \"starworking@126.com \" 配置文本编辑器：1$ git config --global core.editor vim 配置差异分析工具：1$ git config --global merge.tool vimdiff 6. 查看配置信息1$ git config --list 7. 获取帮助12$ git help $ man git-","tags":[{"name":"git","slug":"git","permalink":"https://joecnn.github.io/wiki-site/tags/git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"git","slug":"软件开发/devops/git","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/git/"}]},{"title":"Git基本操作","date":"2017-12-25T16:00:00.000Z","path":"wiki/软件开发/devops/git/Git基本操作/","text":"1. 取得 Git 仓库有两种取得 Git 项目仓库的方法，第一种是在现存的目录下，通过初始化文件夹来创建新的 Git 仓库：1git init 第二种是克隆仓库项目，Git 支持许多数据传输协议(git://, http(s)://, ssh)：1$ git clone [url] new_project_name 2. 检查当前文件状态要确定文件状态，可以使用 git status 命令。文件状态分为： untracked files: 未跟踪 changes to be committed: 已暂存 changed but not updated: 已修改，未暂存 3. 追踪文件使用命令 git add 开始跟踪文件或文件夹：1$ git add README git add 命令是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 4. 忽略文件当某些文件无需纳入 Git 管理时，可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。文件 .gitignore 的格式如下：123456# 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件 !lib.a # 但 lib.a 除外 /TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 对现有项目添加 git gitignore 不生效的解决办法： .gitignore 不生效解决方法 5. 查看已暂存和未暂存的变更内容如果想要查看具体修改内容，可以使用 git diff 命令：1$ git diff 此命令比较的是当前目录文件和暂存区快照之间的差异，也就是被修改后没有暂存的内容。如果想要查看暂存起来的文件和上次提交时的文件的差异，可以使用：12$ git diff --cached $ git diff --staged #v1.6.1+ 6. 提交更新当将所有文件加入暂存区后可以提交了，运行命令：1$ git commit -m \"提交已经暂存(add)过的变更\" 给 git commit 加上 -a 选项，跳过暂存步骤，自动将所有已跟踪过的文件提交：1$ git commit -a -m '直接提交变更，跳过暂存步骤' 7. 撤消操作某些时候，提交完后才发现漏了几个文件，或者提交信息写错了，修改最后一次提交，可以使用 –amend 选项重新提交：1$ git commit --amend -m \"修改备注信息\" 某些时间，不小心将不需要提交的文件使用了 git add，要取消暂存文件，可以使用以下命令：1$ git reset HEAD file_name 如果对文件修改没必要，需要撤销对文件的修改，可以使用：1$ git checkout -- file_name 注意此条命令会取消文件所有修改，回到上次提交的状态，需要谨慎使用。 8. 移除文件移除文件，并从工作目录中删除文件，也支持正则匹配：1$ git rm -f file_name 另一种情况，从 Git 中移除跟踪，但仍然保留文件，使用 –cached 选项即可：1$ git rm --cached file_name 9. 移动文件重命名或移动文件，都可以使用以下命令：1$ git mv file_from file_to 其实运行 git mv 就相当于运行下面三条命令：123$ mv README.txt README $ git rm README.txt $ git add README 10. 查看提交历史想回顾下提交历史记录，可以使用 git log 命令查看。123456789-p : 显示每次提交的内容差异 -2：仅显示最近两次更新 --stat : 仅显示简要的增改行数统计 --pretty : 自定义显示风格 =oneline : 放在一行显示 =format:\"%h - %an, %ar : %s\" 格式输出 --since=2.weeks : 最近时间段 --author=xx : 作者 --committer=xx : 提交者 使用图形化工具查看历史提交记录，使用命令 gitk 即可。 11. 远程仓库的使用要查看当前配置有哪些远程仓库，可以使用 git remote 命令，会列出每个远程仓库：1$ git remote -v 要添加一个新的远程仓库，需要在 github 上创建一个空的仓库，指定一个简单的名字，以便引用，运行 git remote add [shortname] [url] 创建本地仓库:1$ git remote add repository_name git://github.com/joecnn/imgcompact.git 从远程仓库拉取数据到本地，但并不合并到当前工作分支：1$ git fetch [remote-name] 使用 git pull 命令拉取远程仓库并合并到本地分支：1$ git pull [remote-name] 推送数据到远程仓库：1$ git push origin master 查看远程仓库信息：1$ git remote show origin 远程仓库的删除和重命名：12$ git remote rename old_name new_name $ git remote rm rp_name","tags":[{"name":"git","slug":"git","permalink":"https://joecnn.github.io/wiki-site/tags/git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"git","slug":"软件开发/devops/git","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/git/"}]},{"title":"gitignore不生效解决方法","date":"2017-11-17T16:00:00.000Z","path":"wiki/软件开发/devops/git/gitignore不生效解决方法/","text":"在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如： 1234567# 此为注释 – 将被 Git 忽略*.a # 忽略所有 .a 结尾的文件!lib.a # 但 lib.a 除外/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODObuild/ # 忽略 build/ 目录下的所有文件doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 但是有时候在项目开发过程中，想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： 123git rm -r --cached .git add .git commit -m 'update .gitignore'","tags":[{"name":"git","slug":"git","permalink":"https://joecnn.github.io/wiki-site/tags/git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"git","slug":"软件开发/devops/git","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/git/"}]},{"title":"常见问题收集","date":"2017-10-16T16:00:00.000Z","path":"wiki/软件开发/linux/常见问题收集/","text":"此文档为使用linux过程中遇到的各种坑，以及跳出坑的方法。 1. 启动时提示 systemd[1]: Failed to load SELinux policy. freezing. 无法进入系统此问题为设置错了 SELinux 配置，在启动时按e键修改 grub，在标签 fi 内核参数中增加一个参数1selinux=0 后按 ctrl+x 重启可进入，再修改 ==/etc/selinux/config==12SELINUX=disabledSELINUXTYPE=target 2. centos7 端口已开放，也开放了iptables防火墙，还是无法访问此问题为 centos7 已默认使用 firewall 为防火墙！1234567891011#关闭防火墙systemctl stop firewalld.service#禁止防火墙开机启动systemctl disable firewalld.service#查看防火墙开放端口firewall-cmd --list-ports#开放端口firewall-cmd --zone=public --add-port=80/tcp --permanent","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]},{"title":"Git标签","date":"2017-03-30T16:00:00.000Z","path":"wiki/软件开发/devops/git/Git标签/","text":"Git 可以对某一时间点上的版本打上标签，经常用于某个软件版本（比如v1.0等）。 一、列出标签12# -l 表示匹配(pattern)1.0.*的标签git tag -l 'v1.0.*' 二、新建标签Git 的标签分为两类： 轻量级(lightweight)的标签，指向特定提交的引用，就像个不会变化的==分支==。 含附注(annotated)的标签，实际上是存储在仓库中的一个==独立对象==。 12345# 无参数默认创建一个轻量级标签git tag v1.0.1# -a 表示创建一个含附注的标签git tag -a v1.0.1 -m '1.0.1版本' 三、查看标签信息1git tag show v1.0 四、签署和验证标签使用私钥签署(GPG)标签，需要使用对应公钥进行验证。12345# -s 使用私钥进行GPG签署git tag -s v1.0 -m '1.0版本'# -v 使用公钥进行验证git tag -v v1.0 五、推送标签到远端仓库添加完标签后，需要推送到远程仓库，其他人才能获取到标签信息。12345# 推送指定标签git push origin v1.0# 推送所有标签git push origin --tags","tags":[{"name":"git","slug":"git","permalink":"https://joecnn.github.io/wiki-site/tags/git/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"devops","slug":"软件开发/devops","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/"},{"name":"git","slug":"软件开发/devops/git","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/devops/git/"}]},{"title":"安装Python3","date":"2016-01-07T16:00:00.000Z","path":"wiki/软件开发/linux/安装Python3/","text":"1. 安装 Python 依赖包12$ yum groupinstall \"Development tools\"$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 2. 下载 Python3.5 源码包并编译123$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz$ tar -zxvf Python-3.5.0.taz$ cd Python-3.5.0 3. 编译安装1234$ ./configure --prefix=/usr/local --enable-shared$ make $ make install$ ln -s /usr/local/bin/python3 /usr/bin/python3 4. 在运行 Python 前配置需要库12$ echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/local.conf$ ldconfig 5. 检测安装1$ python3 --version 6. 移除编译 Python 安装的库12$ yum groupremove \"Development tools\"$ yum remove zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 7. 设置别名1$ alias py=python3","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]},{"title":"安装gcc","date":"2016-01-05T16:00:00.000Z","path":"wiki/软件开发/linux/安装gcc/","text":"一、安装内核支持gcc1$ yum -y install gcc+ gcc-c++ 二、手动升级gcc1. 获取安装包12$ wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.bz2$ tar -jxvf gcc-4.8.2.tar.bz2 2. 下载编译需要的依赖项12$ cd gcc-4.8.2$ ./contrib/down_prerequiesites 3. 建立一个目录供编译输出的文件存放1$ mkdir gcc-build-4.8.2 4. 生成 Makefile 文件12$ cd gcc-build-4.8.2$ ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib 5. 编译, -j4选项是make对多核处理器的优化12$ make -j4$ yum -y install glibc-devel.i686 glibc-devel 6. 安装1$ make install 7. 检查gcc版本1$ gcc --version","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]},{"title":"网络配置","date":"2016-01-05T16:00:00.000Z","path":"wiki/软件开发/linux/网络配置/","text":"1. 检测是否已启动网卡1$ ifconfig &amp; ifup eth0 2. 修改对应网卡配置信息1$ vi /etc/sysconfig/network-scripts/ifcfg-eth0 123456789DEVICE=&quot;eth0&quot;HWADDR=&quot;00:0C:29:FD:FF:2A&quot;NM_CONTROLLED=&quot;yes&quot;ONBOOT=&quot;yes&quot;IPADDR=192.168.1.31NETMASK=255.255.255.0GATEWAY=192.168.1.1BOOTPROTO=staticDNS1=192.168.1.1 3. 重启网卡12$ service network restart $ /etc/init.d/network restart 4. 可以安装网络图形设置工具1$ yum install setuptool 5. 检测网络状态1$ service network status","tags":[{"name":"linux","slug":"linux","permalink":"https://joecnn.github.io/wiki-site/tags/linux/"}],"categories":[{"name":"软件开发","slug":"软件开发","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/"},{"name":"linux","slug":"软件开发/linux","permalink":"https://joecnn.github.io/wiki-site/categories/软件开发/linux/"}]}]}