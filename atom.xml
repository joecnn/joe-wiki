<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joe&#39;s Wiki</title>
  
  
  <link href="/wiki-site/atom.xml" rel="self"/>
  
  <link href="https://joecnn.github.io/wiki-site/"/>
  <updated>2019-02-06T02:53:57.076Z</updated>
  <id>https://joecnn.github.io/wiki-site/</id>
  
  <author>
    <name>Joshua Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/hello-world/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/hello-world/</id>
    <published>2019-02-06T02:53:57.076Z</published>
    <updated>2019-02-06T02:53:57.076Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How To Open A Port In CentOS 7 With Firewalld</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/How%20To%20Open%20A%20Port%20In%20CentOS%207%20With%20Firewalld/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/How To Open A Port In CentOS 7 With Firewalld/</id>
    <published>2018-12-16T16:00:00.000Z</published>
    <updated>2019-02-06T09:34:33.635Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial will walk you through opening a port in the default firewall in CentOS 7, firewalld.</p><p>You will see that while we can manually open a specific port, it is often easier and beneficial to allow based on predefined services instead.</p><h3 id="Open-Specific-Port"><a href="#Open-Specific-Port" class="headerlink" title="Open Specific Port"></a>Open Specific Port</h3><p>Opening a port in firewalld is fairly straightforward, in the below example we allow traffic in from any source IP address to TCP port 100. First we modify the persistent configuration, then we reload firewall-cmd to load this change into the running configuration.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --permanent --add-port=100/tcp</span><br><span class="line">success</span><br><span class="line">[root@centos7 ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure></p><p>If the –permanent flag is not specified, this will only change the running configuration but will not be saved.</p><p>We can check the ports that are opened in the current default zone with ‘–list-ports’.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --list-ports</span><br><span class="line">100/tcp</span><br></pre></td></tr></table></figure></p><p>As expected we see that TCP port 100 is open.</p><p>Should we wish to remove a port, we can use ‘–remove-port=’ instead.</p><p>We can also open a range of ports in the same way.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --permanent --add-port=200-300/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure></p><h3 id="Open-Predefined-Service"><a href="#Open-Predefined-Service" class="headerlink" title="Open Predefined Service"></a>Open Predefined Service</h3><p>Rather than manually specifying a port number to allow through the firewall, we can make use of a bunch of predefined services which may be easier. For example instead of opening TCP port 80, we can use the ‘http’ service.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --permanent --add-service=http</span><br><span class="line">success</span><br><span class="line">[root@centos7 ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure><p>Now if we list the services that are accepted through the firewall, we will see http listed along with ssh and dhcpv6-client, which are allowed through by default.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# firewall-cmd --list-services</span><br><span class="line">dhcpv6-client http ssh</span><br></pre></td></tr></table></figure></p><p>This is a predefined service and can be found as an XML file in the /usr/lib/firewalld/services/ directory. Here’s what the http service we just used looks like.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]# cat /usr/lib/firewalld/services/http.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>WWW (HTTP)<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>HTTP is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. This option is not required for viewing pages locally or developing Web pages.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"80"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can create custom services by copying one of these into the /etc/firewalld/services/ directory and then customizing it. The services in the /usr/lib/firewalld/services/ directory should NOT be modified, changes should be copied into /etc/firewalld/services/ followed by a reload of firewall-cmd to pick up the changes.</p><h3 id="Services-Or-Manual-Ports"><a href="#Services-Or-Manual-Ports" class="headerlink" title="Services Or Manual Ports?"></a>Services Or Manual Ports?</h3><p>Why would we want to use services if we can just specify the port? Modules can be specified in a service, for example samba.xml loads the module “nf_conntrack_netbios_ns” for us when it’s enabled, along with four different ports which is a lot easier than doing all of this ourselves as we don’t need to memorize all of the ports required for a service.</p><p>Still not a fan of firewalld? Don’t worry, you can always install ifconfig in CentOS 7 instead, however note that this is considered deprecated.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>We have seen that the firewall in CentOS 7 can be modified to open a specific port, or more preferably we can open it to a service.</p><p>While these basic examples demonstrate opening a port to any source, this is usually not desirable. We can further filter based on source traffic with firewalld rich rules.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This tutorial will walk you through opening a port in the default firewall in CentOS 7, firewalld.&lt;/p&gt;
&lt;p&gt;You will see that while we can 
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins开机启动</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/Jenkins%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/Jenkins开机启动/</id>
    <published>2018-10-18T12:30:00.000Z</published>
    <updated>2019-02-06T08:40:27.490Z</updated>
    
    <content type="html"><![CDATA[<p>使用 jenkins 最简单的方式即使用 war 包进行启动，war 包中带了 jetty 服务，可以直接 <code>java -jar jenkins.war</code> 启动使用。<br>但每次都使用命令相当繁琐，本编即介绍如何将此步骤设置于开机启动。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><ul><li>Linux CentOs 7.3      <a href="https://www.centos.org/download/">下载</a></li><li>Jre 1.8.0<a href="https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">下载</a></li><li>Jenkins 2.138.2<a href="https://jenkins.io/download/">下载</a></li></ul><h2 id="2-编写-linux-开机自运行脚本-jenkins-sh"><a href="#2-编写-linux-开机自运行脚本-jenkins-sh" class="headerlink" title="2. 编写 linux 开机自运行脚本 jenkins.sh"></a>2. 编写 linux 开机自运行脚本 jenkins.sh</h2><blockquote><p>将该脚本加入chkconfig启动项目中，开机时运行。<br>  JENKINS_ROOT: jenkins软件目录<br>  JENKINS_HOME: jenkins主目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment">#description:开机启动jenkins服务</span></span><br><span class="line"></span><br><span class="line">JENKINS_ROOT=/usr/<span class="built_in">local</span>/jenkins</span><br><span class="line">JENKINSFILENAME=jenkins.war</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止方法</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stoping <span class="variable">$JENKINSFILENAME</span> "</span></span><br><span class="line">        ps -ef|grep <span class="variable">$JENKINSFILENAME</span> |awk <span class="string">'&#123;print $2&#125;'</span>|<span class="keyword">while</span> <span class="built_in">read</span> pid</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">           <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">           <span class="built_in">echo</span> <span class="string">" <span class="variable">$pid</span> kill"</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$JENKINSFILENAME</span> "</span></span><br><span class="line">        nohup <span class="variable">$JENKINS_ROOT</span>/start_jenkins.sh &gt;&gt; <span class="variable">$JENKINS_ROOT</span>/jenkins.log 2&gt;&amp;1 &amp;</span><br><span class="line">  ;;</span><br><span class="line">stop)</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line">status)</span><br><span class="line">  ps -ef|grep <span class="variable">$JENKINSFILENAME</span></span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">'Usage: %s &#123;start|stop|restart|status&#125;\n'</span> <span class="string">"<span class="variable">$prog</span>"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="3-编写启动-war-包命令-start-jenkins-sh"><a href="#3-编写启动-war-包命令-start-jenkins-sh" class="headerlink" title="3. 编写启动 war 包命令 start_jenkins.sh"></a>3. 编写启动 war 包命令 start_jenkins.sh</h2><blockquote><p>启动war包的命令，由于在启动时需要使用java命令，所以在脚本中加入了java的bin路径。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">JENKINS_ROOT=/usr/<span class="built_in">local</span>/jenkins</span><br><span class="line"><span class="built_in">export</span> JENKINS_HOME=<span class="variable">$JENKINS_ROOT</span>/home</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jre1.8.0_151 PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">java -jar <span class="variable">$JENKINS_ROOT</span>/jenkins.war --httpPort=8080</span><br></pre></td></tr></table></figure><h2 id="4-加入-chkconifg-启动项目"><a href="#4-加入-chkconifg-启动项目" class="headerlink" title="4. 加入 chkconifg 启动项目"></a>4. 加入 chkconifg 启动项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/jenkins/jenkins.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软链接到 init.d 目录</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/jenkins/jenkins.sh /etc/rc.d/init.d/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到 chkconfig</span></span><br><span class="line">chkconfig --add jenkins</span><br><span class="line">chkconfig --level 345 jenkins on</span><br></pre></td></tr></table></figure><h2 id="5-启动jenkins服务"><a href="#5-启动jenkins服务" class="headerlink" title="5. 启动jenkins服务"></a>5. 启动jenkins服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/jenkins start</span><br></pre></td></tr></table></figure><p>到此已经可以在启动服务器时自动运行jenkins了，端口占用8080.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 jenkins 最简单的方式即使用 war 包进行启动，war 包中带了 jetty 服务，可以直接 &lt;code&gt;java -jar jenkins.war&lt;/code&gt; 启动使用。&lt;br&gt;但每次都使用命令相当繁琐，本编即介绍如何将此步骤设置于开机启动。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
    
      <category term="jenkins" scheme="https://joecnn.github.io/wiki-site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>添加开机运行脚本</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/添加开机运行脚本/</id>
    <published>2018-10-17T16:00:00.000Z</published>
    <updated>2019-02-06T09:39:42.628Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 设置开机自动启动的方式有好多种，这里介绍一种通过 <code>chkconfig</code> 命令添加脚本为开机启动的方法。</p><h3 id="1-编写脚本-autostart-sh"><a href="#1-编写脚本-autostart-sh" class="headerlink" title="1. 编写脚本 autostart.sh"></a>1. 编写脚本 autostart.sh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment">#description: 开机自动运行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启redis服务 端口为6379</span></span><br><span class="line">/usr/<span class="built_in">local</span>/service/redis-2.8.3/src/redis-server --port 6379 &amp;</span><br></pre></td></tr></table></figure><blockquote><p>脚本第二行表示在 2/3/4/5运行级别启动，启动序号80，关闭序号90</p></blockquote><h3 id="2-赋予脚本执行权限"><a href="#2-赋予脚本执行权限" class="headerlink" title="2. 赋予脚本执行权限"></a>2. 赋予脚本执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/service/redis-2.8.3/autostart.sh</span><br></pre></td></tr></table></figure><h3 id="3-创建软链接到-init-d-目录下"><a href="#3-创建软链接到-init-d-目录下" class="headerlink" title="3. 创建软链接到 init.d 目录下"></a>3. 创建软链接到 init.d 目录下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/service/redis-2.8.3/autostart.sh /etc/rc.d/init.d/redis</span><br></pre></td></tr></table></figure><h3 id="4-添加到开机启动项中"><a href="#4-添加到开机启动项中" class="headerlink" title="4. 添加到开机启动项中"></a>4. 添加到开机启动项中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig -add redis</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure><p>到这里已经将脚本添加到开机启动项中，重启服务器即可看到redis服务已经启动了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux 设置开机自动启动的方式有好多种，这里介绍一种通过 &lt;code&gt;chkconfig&lt;/code&gt; 命令添加脚本为开机启动的方法。&lt;/p&gt;
&lt;h3 id=&quot;1-编写脚本-autostart-sh&quot;&gt;&lt;a href=&quot;#1-编写脚本-autostart-sh&quot; cla
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins持续编译</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/Jenkins%E6%8C%81%E7%BB%AD%E7%BC%96%E8%AF%91/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/Jenkins持续编译/</id>
    <published>2018-10-17T13:00:00.000Z</published>
    <updated>2019-02-06T08:40:31.629Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3cschool.cn/jenkins/jenkins-5h3228n2.html">Jenkins</a> 是一个开源自动化服务器，可用于自动化各种任务，如构建、测试和部署软件，本文档是结合Jenkins，Java，Maven，Github实现持续自动化编译。</p><h2 id="1-思路-amp-流程"><a href="#1-思路-amp-流程" class="headerlink" title="1. 思路&amp;流程"></a>1. 思路&amp;流程</h2><ul><li>安装 Java、Maven、Git、Jenkins 环境</li><li>配置 Jenkins 拉取 Github 项目</li><li>编译、单元测试 Maven 项目形成 war 包</li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><blockquote><p>由于 Maven 需要 jdk 支持，所以需要先配置 jdk 环境，再配置 maven 环境。</p><ul><li>准备可联网的 <a href="https://www.centos.org/download/">Linux Centos 7.3</a> 服务器</li><li>下载 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Jdk1.8.0</a> 并设置环境变量</li><li>下载 <a href="http://maven.apache.org/download.cgi">Maven3.3</a> 并设置环境变量</li><li>安装 <a href="https://git-scm.com/download/linux">Git</a></li></ul></blockquote><h2 id="3-安装-Jenkins"><a href="#3-安装-Jenkins" class="headerlink" title="3. 安装 Jenkins"></a>3. 安装 Jenkins</h2><blockquote><p>可以设置 JENKINS_HOME 环境变量，改变 jenkins 启动生成文件存放位置.<br>其它安装方式参考：<a href="https://www.w3cschool.cn/jenkins/jenkins-79ex28jh.html">Jenkins安装</a></p></blockquote><p>首先从 <a href="https://jenkins.io/">Jenkins官方网站</a> 下载最新的 war 包，只需运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jenkins.war --httpPort=8080</span><br></pre></td></tr></table></figure><p>Jenkins 服务就启动成功了，它的 war 包自带了 jetty 服务器，剩下的工作可以在浏览器内完成。  </p><h2 id="4-配置-Jenkins"><a href="#4-配置-Jenkins" class="headerlink" title="4. 配置 Jenkins"></a>4. 配置 Jenkins</h2><p>首次进入 Jenkins 时，出于安全考虑， Jenkins 会自动生成一个随机口令，粘帖口令进入安装界面。<br>进入 Jenkins 后选择 “<strong>Install suggested plugins</strong>“ 安装推荐插件，Jenkins 就自动配置好了 Maven、git 等常用插件。</p><hr><p>在开始使用 Jenkins 创建项目前，需要在”<strong>系统管理</strong>“-&gt;”<strong>全局工具配置</strong>“中添加 JDK、Maven 设置：<br><img src="../../../../images/jenkins_jdk.png" alt="jenkins_jdk"><br><img src="../../../../images/jenkins_maven.png" alt="jenkins_maven"><br>到此 Maven 项目的 Jenkins 已配置完成，下面开始创建构建任务。</p><h2 id="5-构建Maven项目"><a href="#5-构建Maven项目" class="headerlink" title="5. 构建Maven项目"></a>5. 构建Maven项目</h2><p>在 Jenkins 首页选择”<strong>New 任务</strong>“，输入名字，选择”<strong>构建一个自由风格的软件项目</strong>“：<br><img src="../../../../images/jenkins_new_project.png" alt="jenkins_new_project"></p><p>在配置页面中，”<strong>Source Code Management</strong>“ 选择 <strong>Git</strong>，填入地址，默认使用 mater 分支，如果为私人项目需要口令，在 Credentials 中添加用户名/口令：<br><img src="../../../../images/jenkins_git.png" alt="jenkins_git"></p><p>在 “<strong>Build Triggers</strong>“ 中选择 “<strong>轮询 SCM</strong>“ 表示定时检查版本库，发现有新的提交就触发构建：<br><img src="../../../../images/jenkins_scm.png" alt="jenkins_scm"></p><blockquote><p>说明1：Triggerbuilds remotely(webhooks)<br>这个选项就是配合 git 仓库的钩子功能实现代码 PUSH 后 Jenkins 收到通知自动触发构建项目的动作<br>说明2：轮询 SCM<br>定时检查源码变更，如果有更新就克隆下最新 code 下来，然后执行构建动作</p></blockquote><p>在”<strong>Build</strong>“中可以添加编译命令，Maven默认的Root POM是<code>pom.xml</code>，如果<code>pom.xml</code>不在根目录下，则需要填入子目录：<br><img src="../../../../images/jenkins_build.png" alt="jenkins_build"></p><blockquote><p>说明1：选择之前添加的 maven 环境<br>说明2：填入需要执行的 mvn 命令<br>说明3：pom 不在根目录下，填入子目录 wxsell/pom.xml</p></blockquote><p>保存后就可以”<strong>立即构建</strong>“，可以在”<strong>Console Output</strong>“中看到控制台详细输出：<br><img src="../../../../images/jenkins_output.png" alt="jenkins_output"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>到此已配置了 Jenkins 自动编译任务，当 Github 上项目有变更时，会自动拉取项目进行编译，排除了可能不同机器上编译环境不同导致的影响。<br>在完成持续编译后，可以结合 Jenkins 的编译后动作进行自动部署，实现持续部署功能。在下篇笔记中将会记录如何实现持续部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/jenkins/jenkins-5h3228n2.html&quot;&gt;Jenkins&lt;/a&gt; 是一个开源自动化服务器，可用于自动化各种任务，如构建、测试和部署软件，本文档是结合Jenkins，Java，Maven，
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
    
      <category term="jenkins" scheme="https://joecnn.github.io/wiki-site/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像仓库加速</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/docker%20%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/docker/docker 镜像加速/</id>
    <published>2018-08-05T06:00:00.000Z</published>
    <updated>2019-02-06T09:52:23.843Z</updated>
    
    <content type="html"><![CDATA[<p>docker 在默认安装后，当需要下载镜像时，通过命令<code>docker pull user/image</code> 拉取镜像都是访问默认的 docker hub 上的镜像，在国内网络环境下，下载一个镜像需要很长的时间，可以考虑使用 Registry Mirror 配置国内的镜像仓库。</p><blockquote><p>使用由阿里云提供的 Docker 镜像仓库进行加速。</p></blockquote><h3 id="1-登录阿里云"><a href="#1-登录阿里云" class="headerlink" title="1. 登录阿里云"></a>1. 登录阿里云</h3><blockquote><p><a href="https://cr.console.aliyun.com/?spm=5176.100239.blogcont29941.13.haQkR4#/accelerator">阿里云 Docker 镜像仓库</a></p></blockquote><p>开启 Docker Hub 镜像站点<br><img src="../../../../../images/docker_ali.png" alt="docker_ali"></p><h3 id="2-Windows-使用-Docker-加速"><a href="#2-Windows-使用-Docker-加速" class="headerlink" title="2. Windows 使用 Docker 加速"></a>2. Windows 使用 Docker 加速</h3><ol><li>创建一台 docker machine 同时配置 docker 加速器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://6bybmq21.mirror.aliyuncs.com -d virtualbox default</span><br></pre></td></tr></table></figure><ol start="2"><li><p>对于已经创建的 docker machine 实例，更换镜像源方法如下<br>i. 在 window 命令执行 <code>docker-machine ssh [machine-name]</code> 进入 VM bash<br>ii. <code>sudo vi /var/lib/boot2docker/profile</code><br>iii. 在<code>--label provider=virtualbox</code>的添加一行 <code>--registry-mirror https://xxx.mirror.aliyuncs.com</code><br>iiii. 重启 docker 服务：<code>sudo /etc/init.d/docker restart</code> 或重启 VM ： <code>docker-machine restart</code></p></li><li><p>docker for windows</p><blockquote><p>设置 Daemon Registry mirrors<br><img src="../../../../../images/docker_setting.png" alt="docker_setting"></p></blockquote></li><li><p>查看 mirror 配置</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-machine env default</span><br><span class="line">eval &quot;$(docker-machine env default)&quot;</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure><h3 id="3-CentOs-使用镜像加速"><a href="#3-CentOs-使用镜像加速" class="headerlink" title="3. CentOs 使用镜像加速"></a>3. CentOs 使用镜像加速</h3><ol><li>安装/升级 Docker 客户端</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 daemon 配置文件 <code>/etc/docker/daemon.json</code> 来使用加速</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://6bybmq21.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker 在默认安装后，当需要下载镜像时，通过命令&lt;code&gt;docker pull user/image&lt;/code&gt; 拉取镜像都是访问默认的 docker hub 上的镜像，在国内网络环境下，下载一个镜像需要很长的时间，可以考虑使用 Registry Mirror 
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/"/>
    
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Start</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/docker%20start/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/docker/docker start/</id>
    <published>2018-08-05T04:30:00.000Z</published>
    <updated>2019-02-06T09:52:08.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Window10-下安装"><a href="#1-Window10-下安装" class="headerlink" title="1. Window10 下安装"></a>1. Window10 下安装</h3><blockquote><p>Window10 下载最新的 <a href="https://store.docker.com/editions/community/docker-ce-desktop-windows">Docker for windows</a> 安装包进行安装</p></blockquote><p>Windows10 下可以切换 Docker Platform 为 Linux 或者 Window，下载的镜像需要对应的平台支持。</p><p>Window10 下自带了虚拟器，需要开启 Hyper-V，在 控制面板-程序-打开Windows功能 中开启<br><img src="../../../../../images/docker_hyperv.png" alt="docker_hyperv"></p><blockquote><p>Windows10 下的 Docker 使用虚拟机 IP 即为本机 127.0.0.1 ，可以在 CMD、PowerShell 中直接进行操作。</p></blockquote><h3 id="2-Windows7-下安装"><a href="#2-Windows7-下安装" class="headerlink" title="2. Windows7 下安装"></a>2. Windows7 下安装</h3><blockquote><p>Windows7 下在最新的 <a href="https://docs.docker.com/toolbox/toolbox_install_windows/">DockerToolBox</a> 安装包进行安装<br>DockerToolBox 会自动安装 Oracle Virtual Box 虚拟机，需要依托虚拟机进行启动。  </p></blockquote><h4 id="2-1-创建-docker-machine"><a href="#2-1-创建-docker-machine" class="headerlink" title="2.1 创建 docker machine"></a>2.1 创建 docker machine</h4><blockquote><p>安装完成后会附带 docker-machine.exe 使用此工具可以安装 docker 环境</p></blockquote><ol><li>查询 docker machine</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 default machine</li></ol><blockquote><p>使用 virtualbox 驱动模式，会自动下载 docker2boot.iso 镜像进行创建 virtualbox 虚拟机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create -d virtalbox default</span><br></pre></td></tr></table></figure><ol start="3"><li>查看 docker 信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine env default</span><br></pre></td></tr></table></figure><ol start="4"><li>管理 docker machine</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine -h</span><br></pre></td></tr></table></figure><h4 id="2-2-使用-putty"><a href="#2-2-使用-putty" class="headerlink" title="2.2 使用 putty"></a>2.2 使用 putty</h4><blockquote><p>在 Windows 命令进入 Docker 后，shell 不能复制，操作不方便，因此使用支持 SSH 的工具来连接 docker 虚拟机。</p></blockquote><ol><li>查询 docker mechine ip：<blockquote><p>在 docker machine env 中的 DOCKER_HOST </p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine env default</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 Putty 连接到 docker 终端：</li></ol><blockquote><p>默认用户名：docker 密码： tcuser</p></blockquote><p><img src="../../../../../images/docker_cli.png" alt="docker_cli"></p><blockquote><p>PS：在 DockerToolBox 下自动安装的是 VirtualBox5.1，但是在启动 docker default mechine 时一直出错（VERR_SUPDRV_HARDENIGN_EVIL_HANDLE），经过查询是由于该版本的 vboxdrv 核心驱动请求过大的访问权限。。<br>最后安装旧版的 VirtualBox4.3.12 后成功解决。</p></blockquote><h4 id="2-3-docker-virtualbox-管理"><a href="#2-3-docker-virtualbox-管理" class="headerlink" title="2.3 docker virtualbox 管理"></a>2.3 docker virtualbox 管理</h4><p>由于使用 docker-machine 创建的虚拟机默认路径为 <strong>/user/.docker/machine/</strong> 下，可能在以后容器创建过多时占用系统盘资源。将 virtualbox 虚拟硬盘移动到其它盘。</p><ol><li>复制 default vmdk 到指定路径<blockquote><p>在指定盘进行复制一份 vmdk </p></blockquote></li></ol><p><img src="../../../../../images/vbox_copy.png" alt="vbox_copy"></p><ol start="2"><li>为 default 虚拟机添加新的虚拟硬盘<blockquote><p>添加新的虚拟硬盘后，删除原来的 disk.vmdk 文件即可</p></blockquote></li></ol><p><img src="../../../../../images/vbox_delete.png" alt="vbox_delete"></p><p>修改完成后，重启 docker machine 即可</p><p>参考资料：  </p><ol><li>白皮书：<a href="https://www.gitbook.com/book/yeasy/docker_practice/details">https://www.gitbook.com/book/yeasy/docker_practice/details</a></li><li>官方：<a href="https://www.docker.com/">https://www.docker.com/</a></li><li>镜像库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Window10-下安装&quot;&gt;&lt;a href=&quot;#1-Window10-下安装&quot; class=&quot;headerlink&quot; title=&quot;1. Window10 下安装&quot;&gt;&lt;/a&gt;1. Window10 下安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Window1
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/"/>
    
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>《刻意练习》读书笔记</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/生活学习/《刻意练习》读书笔记/</id>
    <published>2018-05-11T16:00:00.000Z</published>
    <updated>2019-02-06T10:00:34.363Z</updated>
    
    <content type="html"><![CDATA[<p><strong>格拉德威尔1万小时定律</strong>：人们眼中的天才之所有卓越非凡，并非天资超人一等，而是付出了持续不断的努力。只要经过1万小时的锤炼，任何人都能从平凡变成超凡。</p><p><strong>从不存在1万小时定律</strong>，它仅仅是畅销书作家多心理科学研究的一次不太严谨的演绎而已。</p><p>首先，不同专业的技能习得时间与练习时间并不存在一个1万小时的最低阈值。<br>其次，成功与练习时间并不完全成正比，一部分取决于天赋也取决于练习的方法。</p><p><strong>刻意练习的本质是长时记忆</strong>，那些卓越的专家能够将工作记忆与长时记忆对接起来，在进行专业活动时，能够调用更大容量的工作记忆。<br>例如专家升级SSD为虚拟内存，新手还在使用小内存。</p><p>刻意练习的任务难度要适中，能收到反馈，有足够的次数重复练习，学习者能够纠正自己的错误。</p><p><strong>长时记忆的培养要点</strong>：</p><ul><li><strong>赋予意义、精细编码</strong>：专家们能非常快地明白自己领域的单词与术语，在存储信息时，可以有意识的采取原认知的各项加工策略。</li><li><strong>提取结构或模式</strong>：往往需要将专业领域的知识、提取结构或者模式以更好的方式存储。比如，开发者善用设计模式。</li><li><strong>加快速度、增加连接</strong>：通过大量重复的刻意练习，专家在编码与提取过程比新手都快很多，增加了长时记忆与工作记忆之间的各种通路。</li></ul><p><strong>人们的学习受到情境的制约或促进</strong>。你要学习的 东西将实际应用在什么情境中，那么你就应该在什么样的情境中学习这些东西。比如，你要学习编程，就应该在GitHub里学习。</p><p>从“情境学习”出发，当一名“认知学徒”，逐步成为专家：</p><ul><li>找到学习共同体</li><li>隐形知识显性化，一般被称为策略知识</li><li>模仿榜样</li><li>培养多样性：在多种情境中实践，扩展应用范围</li></ul><p><strong>“绝对音感”并不是只有少数人才拥有的天赋，而是一种只要经过适度的接触和训练，几乎人人都可以培养和发展的能力。</strong></p><p><strong>“天才”是训练的产物</strong></p><p><strong>“天才”更懂得利用大脑的适应力</strong></p><h4 id="一、有目的的练习"><a href="#一、有目的的练习" class="headerlink" title="一、有目的的练习"></a>一、有目的的练习</h4><p><strong>有目的的练习VS天真的练习</strong></p><p>所谓“天真的练习”基本上是反复地做某件事情，并指望只靠那种反复，就能提高表现和水平。</p><p><strong>有目的的练习的四个特点</strong>：</p><ol><li><strong>有目的的练习具有定义明确的特点目标</strong>，主要是“积小胜为大胜”“积跬步以致千里”，最终达到长期目标。</li><li><strong>有目的的练习是专注的</strong>，要想取得进步，必须完全把注意力集中在你的任务上。 </li><li><strong>有目的的练习包含反馈</strong>，不论你在努力做什么事情，都需要反馈来准确辨别你在哪些地方还有不足，以及怎么会存在这些不足。</li><li><strong>有目的的练习需要走出舒适区</strong>，如果你从来不迫使自己走出舒适区，便永远无法进步。</li></ol><p><strong>遇到瓶颈怎么办</strong></p><ol><li>试着做不同的事情，而非更难的事情。不管什么障碍，越过它的最好办法是从不同方向去想办法。</li><li>并非到达极限，而是动机不足。有意义的正面反馈是保持动机的关键要素之一。</li></ol><p><strong>有目的的练习还不够</strong>，还需要特定的练习与训练方法，这种方法就是刻意练习。</p><h4 id="二、大脑的适应能力"><a href="#二、大脑的适应能力" class="headerlink" title="二、大脑的适应能力"></a>二、大脑的适应能力</h4><p><strong>大脑就像肌肉，越练越大</strong>，早在2000年，马圭尔就发表了关于“伦敦出租车司机”的研究成果，在出租车司机的大脑之中，海马体的后部比普通人更大，司龄越长的改部位也越大。</p><p><strong>大脑拥有无限的适应力</strong>，对这种适应能力最早的观察结果，在一些研究中多次出现，这些研究着眼于盲人或者聋哑人的大脑怎样“重新布线”，当盲人使用触摸布莱叶点字进行阅读时，看到大脑中处理部分还是视觉皮层。其结果告诉我们，大脑的结构和功能并不是固定不变的，它会根据你对它的运用尔改变。</p><p><strong>走出舒适区的重要性</strong>，人类的身体有一种偏爱稳定性的倾向，被迫走出舒适区后，身体开始响应那些变化，目的是重新建立体内平衡。</p><p><strong>练习改变大脑结构</strong>，对音乐家的研究表明，音乐训练以各种不同方式改变了大脑的结构和运行，使人们的音乐演奏能力进一步增强。经常性的训练使大脑中受到训练挑战的区域发生改变，大脑通过自身重新布线的方式来适应这些挑战，增强其执行那些挑战的能力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;格拉德威尔1万小时定律&lt;/strong&gt;：人们眼中的天才之所有卓越非凡，并非天资超人一等，而是付出了持续不断的努力。只要经过1万小时的锤炼，任何人都能从平凡变成超凡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从不存在1万小时定律&lt;/strong&gt;，它仅仅是畅销书作家多
      
    
    </summary>
    
      <category term="生活学习" scheme="https://joecnn.github.io/wiki-site/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="读书" scheme="https://joecnn.github.io/wiki-site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>深度阅读</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E9%98%85%E8%AF%BB/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/生活学习/深度阅读/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2019-02-06T10:01:34.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7S阅读法"><a href="#7S阅读法" class="headerlink" title="7S阅读法"></a>7S阅读法</h1><p>一、快速阅读阶段</p><blockquote><p>明确阅读的目的，阅读的内容和速度</p><ul><li>【S1 提问】自我梳理，提出阅读的几个问题<ol><li>我为什么要阅读它？</li><li>它对我来说有多重要？</li><li>我要获得哪些信息？</li><li>我打算把阅读获得的知识用在哪些方面？</li></ol></li><li>【S2 速览】关键词法，快速了解文本内容，通过段落首末句快速了解文本大概</li></ul></blockquote><p>二、深度阅读阶段</p><blockquote><p>找出关键词句，总结作者表达的中心思想，整理论述结构并用自己的语言重构</p><ul><li>【S3 融合】摘录法，快速阅读后通过摘录关键词句搭建全文的框架</li><li>【S4 重构】复述法，用自己的语言复述文本的内容</li><li>【S5 回忆】提问法，通过定期自我提问，回忆文本框架</li></ul></blockquote><p>三、书为我用阶段</p><blockquote><p>通过延伸、交流来加深对阅读的理解</p><ul><li>【S6 延伸】横向、纵向扩展，通过阅读相关资料，扩展知识的广度和深度</li><li>【S7 交流】笔记法，通过与好友交流、分享与实际应用中得到新的思路</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7S阅读法&quot;&gt;&lt;a href=&quot;#7S阅读法&quot; class=&quot;headerlink&quot; title=&quot;7S阅读法&quot;&gt;&lt;/a&gt;7S阅读法&lt;/h1&gt;&lt;p&gt;一、快速阅读阶段&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;明确阅读的目的，阅读的内容和速度&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="生活学习" scheme="https://joecnn.github.io/wiki-site/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="读书" scheme="https://joecnn.github.io/wiki-site/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Docker Mysql</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/docker%20mysql/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/docker/docker mysql/</id>
    <published>2018-03-07T13:30:00.000Z</published>
    <updated>2019-02-06T08:40:09.114Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-mysql"><a href="#docker-mysql" class="headerlink" title="docker mysql"></a>docker mysql</h3><blockquote><p>docker 下启动 mysql 实例步骤</p></blockquote><h4 id="1-查询镜像-images"><a href="#1-查询镜像-images" class="headerlink" title="1. 查询镜像 images"></a>1. 查询镜像 images</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">$ docker search mysql</span><br><span class="line">$ docker pull mysql</span><br></pre></td></tr></table></figure><h4 id="2-创建数据进行映射"><a href="#2-创建数据进行映射" class="headerlink" title="2. 创建数据进行映射"></a>2. 创建数据进行映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /var/docker_data/mysql/data</span><br><span class="line">$ chmod 775 -R /var/docker_data/mysql</span><br></pre></td></tr></table></figure><h4 id="3-运行容器"><a href="#3-运行容器" class="headerlink" title="3. 运行容器"></a>3. 运行容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3306:3306 --name mysql-dev -v /var/docker_data/mysql/data/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=asdf123456 -e MYSQL_USER=root -d mysql</span><br></pre></td></tr></table></figure><h4 id="4-验证是否已启动"><a href="#4-验证是否已启动" class="headerlink" title="4. 验证是否已启动"></a>4. 验证是否已启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker-mysql&quot;&gt;&lt;a href=&quot;#docker-mysql&quot; class=&quot;headerlink&quot; title=&quot;docker mysql&quot;&gt;&lt;/a&gt;docker mysql&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;docker 下启动 mysql 
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/docker/"/>
    
    
      <category term="docker" scheme="https://joecnn.github.io/wiki-site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git安装</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/Git%E5%AE%89%E8%A3%85/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/git/Git安装/</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2019-02-06T09:15:00.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-从源码安装"><a href="#1-从源码安装" class="headerlink" title="1. 从源码安装"></a>1. 从源码安装</h3><p>Git的工作需要调用 curl, zlib, openssl, expat, libconv 等库，所以需要先安装这些依赖工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure></p><h5 id="之后从Git官方站点下载源码："><a href="#之后从Git官方站点下载源码：" class="headerlink" title="之后从Git官方站点下载源码："></a>之后从Git官方站点下载源码：</h5><pre><code>http://git-scm.com/download </code></pre><h5 id="进行编译安装："><a href="#进行编译安装：" class="headerlink" title="进行编译安装："></a>进行编译安装：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxf git-1.7.2.2.tar.gz </span><br><span class="line">$ <span class="built_in">cd</span> git-1.7.2.2 </span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span> all </span><br><span class="line">$ sudo make prefix=/usr/<span class="built_in">local</span> install</span><br></pre></td></tr></table></figure><h3 id="2-在-Linux-上安装"><a href="#2-在-Linux-上安装" class="headerlink" title="2. 在 Linux 上安装"></a>2. 在 Linux 上安装</h3><p>如果要在 Linux 上安装预编译好的 Git 安装包，使用系统提供的包管理工具即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git-core </span><br><span class="line">$ apt-get install git-core</span><br></pre></td></tr></table></figure></p><h3 id="3-在-Mac-上安装"><a href="#3-在-Mac-上安装" class="headerlink" title="3. 在 Mac 上安装"></a>3. 在 Mac 上安装</h3><p>在 Mac 上安装有两种方式，一种是下载 Git 安装工具，下载地址：<br>    <a href="http://git-scm.com/download/mac">http://git-scm.com/download/mac</a> </p><p>另一种是通过 MacPorts 安装，用下面的命令安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo port install git-core +svn +doc +bash_completion +gitweb</span><br></pre></td></tr></table></figure></p><h3 id="4-在-Windows-上安装"><a href="#4-在-Windows-上安装" class="headerlink" title="4. 在 Windows 上安装"></a>4. 在 Windows 上安装</h3><p>在 Windows 上安装非常简单，只要下载 Git 安装工具，下载地址：<br>    <a href="http://git-scm.com/download/win">http://git-scm.com/download/win</a> </p><h3 id="5-初始配置"><a href="#5-初始配置" class="headerlink" title="5. 初始配置"></a>5. 初始配置</h3><p>一般在新的系统上，首先要配置 Git 的工作环境，Git 提供了 git config 的工具，用于配置和读取工作环境变量，这些变量可以存放在以下三个不同地方： </p><ul><li>/etc/gitconfig 文件：对系统中所有用户都适用，若使用 git config 时用 –system 选项，读写的就是这个文件。 </li><li>~/.gitconfig 文件：用户目录下仅用于用户，若使用 git config 时用 –global 选项，读写的就是这个文件。 </li><li>当前项目的 git 目录中的配置文件：这里的配置仅仅对当前项目有效。每一个级别的配置都会覆盖上层的相同配置。 </li></ul><h5 id="第一个要配置的是账户名称和邮箱地址："><a href="#第一个要配置的是账户名称和邮箱地址：" class="headerlink" title="第一个要配置的是账户名称和邮箱地址："></a>第一个要配置的是账户名称和邮箱地址：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"joecnn"</span> </span><br><span class="line">$ git config --global user.email <span class="string">"starworking@126.com "</span></span><br></pre></td></tr></table></figure><h5 id="配置文本编辑器："><a href="#配置文本编辑器：" class="headerlink" title="配置文本编辑器："></a>配置文本编辑器：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor vim</span><br></pre></td></tr></table></figure><h5 id="配置差异分析工具："><a href="#配置差异分析工具：" class="headerlink" title="配置差异分析工具："></a>配置差异分析工具：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure><h3 id="6-查看配置信息"><a href="#6-查看配置信息" class="headerlink" title="6. 查看配置信息"></a>6. 查看配置信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h3 id="7-获取帮助"><a href="#7-获取帮助" class="headerlink" title="7. 获取帮助"></a>7. 获取帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">help</span>  </span><br><span class="line">$ man git-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-从源码安装&quot;&gt;&lt;a href=&quot;#1-从源码安装&quot; class=&quot;headerlink&quot; title=&quot;1. 从源码安装&quot;&gt;&lt;/a&gt;1. 从源码安装&lt;/h3&gt;&lt;p&gt;Git的工作需要调用 curl, zlib, openssl, expat, libconv 等
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/"/>
    
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git基本操作</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/git/Git基本操作/</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2019-02-06T09:16:29.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-取得-Git-仓库"><a href="#1-取得-Git-仓库" class="headerlink" title="1. 取得 Git 仓库"></a>1. 取得 Git 仓库</h3><p>有两种取得 Git 项目仓库的方法，第一种是在现存的目录下，通过<strong>初始化文件夹</strong>来创建新的 Git 仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>第二种是<strong>克隆仓库</strong>项目，Git 支持许多数据传输协议(git://, http(s)://, ssh)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url] new_project_name</span><br></pre></td></tr></table></figure></p><h3 id="2-检查当前文件状态"><a href="#2-检查当前文件状态" class="headerlink" title="2. 检查当前文件状态"></a>2. 检查当前文件状态</h3><p>要确定<strong>文件状态</strong>，可以使用 git status 命令。文件状态分为： </p><ul><li>untracked files: 未跟踪 </li><li>changes to be committed: 已暂存 </li><li>changed but not updated: 已修改，未暂存 </li></ul><h3 id="3-追踪文件"><a href="#3-追踪文件" class="headerlink" title="3. 追踪文件"></a>3. 追踪文件</h3><p>使用命令 git add 开始跟踪文件或文件夹：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure></p><blockquote><p>git add 命令是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。</p></blockquote><h3 id="4-忽略文件"><a href="#4-忽略文件" class="headerlink" title="4. 忽略文件"></a>4. 忽略文件</h3><p>当某些文件无需纳入 Git 管理时，可以创建一个名为 <strong>.gitignore</strong> 的文件，列出要忽略的文件模式。文件 .gitignore 的格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此为注释 – 将被 Git 忽略 </span></span><br><span class="line">*.a       <span class="comment"># 忽略所有 .a 结尾的文件 </span></span><br><span class="line">!lib.a    <span class="comment"># 但 lib.a 除外 </span></span><br><span class="line">/TODO     <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO </span></span><br><span class="line">build/    <span class="comment"># 忽略 build/ 目录下的所有文件 </span></span><br><span class="line"> doc/*.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure></p><p> 对现有项目添加 git gitignore 不生效的解决办法： .gitignore 不生效解决方法</p><h3 id="5-查看已暂存和未暂存的变更内容"><a href="#5-查看已暂存和未暂存的变更内容" class="headerlink" title="5. 查看已暂存和未暂存的变更内容"></a>5. 查看已暂存和未暂存的变更内容</h3><p>如果想要查看具体修改内容，可以使用 git diff 命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure></p><p>此命令比较的是当前目录文件和暂存区快照之间的差异，也就是被修改后没有暂存的内容。<br>如果想要查看暂存起来的文件和上次提交时的文件的差异，可以使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached </span><br><span class="line">$ git diff --staged  <span class="comment">#v1.6.1+</span></span><br></pre></td></tr></table></figure></p><h3 id="6-提交更新"><a href="#6-提交更新" class="headerlink" title="6. 提交更新"></a>6. 提交更新</h3><p>当将所有文件加入暂存区后可以提交了，运行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"提交已经暂存(add)过的变更"</span></span><br></pre></td></tr></table></figure></p><p>给 git commit 加上 -a 选项，跳过暂存步骤，自动将所有已跟踪过的文件提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a -m <span class="string">'直接提交变更，跳过暂存步骤'</span></span><br></pre></td></tr></table></figure></p><h3 id="7-撤消操作"><a href="#7-撤消操作" class="headerlink" title="7. 撤消操作"></a>7. 撤消操作</h3><p>某些时候，提交完后才发现漏了几个文件，或者提交信息写错了，<strong>修改最后一次提交</strong>，可以使用 –amend 选项重新提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  commit  --amend  -m <span class="string">"修改备注信息"</span></span><br></pre></td></tr></table></figure></p><p>某些时间，不小心将不需要提交的文件使用了 git add，要<strong>取消暂存文件</strong>，可以使用以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  reset  HEAD  file_name</span><br></pre></td></tr></table></figure></p><p>如果对文件修改没必要，需要<strong>撤销对文件的修改</strong>，可以使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  checkout  --  file_name</span><br></pre></td></tr></table></figure></p><p>注意此条命令会取消文件所有修改，回到上次提交的状态，需要谨慎使用。 </p><h3 id="8-移除文件"><a href="#8-移除文件" class="headerlink" title="8. 移除文件"></a>8. 移除文件</h3><p>移除文件，并从工作目录中删除文件，也支持正则匹配：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  rm  -f   file_name</span><br></pre></td></tr></table></figure></p><p>另一种情况，从 Git 中移除跟踪，但仍然保留文件，使用 –cached 选项即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git  rm --cached file_name</span><br></pre></td></tr></table></figure></p><h3 id="9-移动文件"><a href="#9-移动文件" class="headerlink" title="9. 移动文件"></a>9. 移动文件</h3><p>重命名或移动文件，都可以使用以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv file_from  file_to</span><br></pre></td></tr></table></figure></p><p>其实运行 git mv 就相当于运行下面三条命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv  README.txt README </span><br><span class="line">$ git rm README.txt </span><br><span class="line">$ git add  README</span><br></pre></td></tr></table></figure></p><h3 id="10-查看提交历史"><a href="#10-查看提交历史" class="headerlink" title="10. 查看提交历史"></a>10. 查看提交历史</h3><p>想回顾下提交历史记录，可以使用 git log 命令查看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-p : 显示每次提交的内容差异 </span><br><span class="line">-2：仅显示最近两次更新 </span><br><span class="line">--<span class="built_in">stat</span> : 仅显示简要的增改行数统计 </span><br><span class="line">--pretty : 自定义显示风格 </span><br><span class="line">    =oneline : 放在一行显示 </span><br><span class="line">    =format:<span class="string">"%h - %an, %ar : %s"</span> 格式输出 </span><br><span class="line">--since=2.weeks : 最近时间段 </span><br><span class="line">--author=xx :  作者 </span><br><span class="line">--committer=xx : 提交者</span><br></pre></td></tr></table></figure></p><p>使用图形化工具查看历史提交记录，使用命令 gitk 即可。 </p><h3 id="11-远程仓库的使用"><a href="#11-远程仓库的使用" class="headerlink" title="11. 远程仓库的使用"></a>11. 远程仓库的使用</h3><p>要查看当前配置有哪些远程仓库，可以使用 git remote 命令，会列出每个远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></p><p>要添加一个新的远程仓库，需要在 github 上创建一个空的仓库，指定一个简单的名字，以便引用，运行 git remote add [shortname] [url] 创建本地仓库:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add repository_name git://github.com/joecnn/imgcompact.git</span><br></pre></td></tr></table></figure></p><p>从远程仓库拉取数据到本地，但并<strong>不合并</strong>到当前工作分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote-name]</span><br></pre></td></tr></table></figure></p><p>使用 git pull 命令拉取远程仓库并<strong>合并</strong>到本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull [remote-name]</span><br></pre></td></tr></table></figure></p><p>推送数据到远程仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>查看远程仓库信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure></p><p>远程仓库的删除和重命名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename old_name new_name </span><br><span class="line">$ git remote rm rp_name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-取得-Git-仓库&quot;&gt;&lt;a href=&quot;#1-取得-Git-仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 取得 Git 仓库&quot;&gt;&lt;/a&gt;1. 取得 Git 仓库&lt;/h3&gt;&lt;p&gt;有两种取得 Git 项目仓库的方法，第一种是在现存的目录下，通过
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/"/>
    
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git介绍</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/Git%E4%BB%8B%E7%BB%8D/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/git/Git介绍/</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2019-02-06T08:55:29.117Z</updated>
    
    <content type="html"><![CDATA[<p> Git是一个<font size="4" color="dark" weight="bold">分布式的版本控制系统</font>，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。  </p><h3 id="一、Git-特点"><a href="#一、Git-特点" class="headerlink" title="一、Git 特点"></a>一、Git 特点</h3><p><font size="4" color="dark" weight="bold">直接记录快照，而非差异</font>，只关心文件数据的整体是否发生变化，并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照 的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。 </p><ol><li><strong>近乎所有操作都是本地执行</strong><br>Git 绝大多数操作都只访问本地文件和资源，因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。而到需要上传到远程仓库或获取远程仓库上内容时才需联网。 </li><li><strong>时刻保持数据完整性：</strong><br>Git 在保存前，所有数据都要进行校验计算，并将结果做为数据的唯一标识。 </li><li><strong>多数操作仅添加数据：</strong><br>Git 操作大多数仅仅是把数据添加到数据库，一旦提交快照就完全不用担心数据丢失。 </li></ol><h3 id="二、Git-文件的三种状态"><a href="#二、Git-文件的三种状态" class="headerlink" title="二、Git 文件的三种状态"></a>二、Git 文件的三种状态</h3><ul><li><strong>已提交(commited)</strong>：表示已被安全的保存到Git仓库中。 </li><li><strong>已修改(modified)</strong>：表示已修改了某个文件，但还未提交保存。 </li><li><strong>已暂存(staged)</strong>：表示已经把已修改的文件放到下次提交时要保存的清单中。 </li></ul><h3 id="三、Git-工作流程"><a href="#三、Git-工作流程" class="headerlink" title="三、Git 工作流程"></a>三、Git 工作流程</h3><ol><li>在工作目录中修改某些文件。  </li><li>对修改后的文件进行快照，然后保存到暂存区域。</li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中</li></ol><p><img src="../../../../../images/git_flow.png" alt="git_flow"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Git是一个&lt;font size=&quot;4&quot; color=&quot;dark&quot; weight=&quot;bold&quot;&gt;分布式的版本控制系统&lt;/font&gt;，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/"/>
    
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gitignore不生效解决方法</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/gitignore%E4%B8%8D%E7%94%9F%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/git/gitignore不生效解决方法/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2019-02-06T09:18:26.739Z</updated>
    
    <content type="html"><![CDATA[<p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></span><br><span class="line"></span><br><span class="line">*.a       <span class="comment"># 忽略所有 .a 结尾的文件</span></span><br><span class="line">!lib.a    <span class="comment"># 但 lib.a 除外</span></span><br><span class="line">/TODO     <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></span><br><span class="line">build/    <span class="comment"># 忽略 build/ 目录下的所有文件</span></span><br><span class="line">doc/*.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><p>但是有时候在项目开发过程中，想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'update .gitignore'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/"/>
    
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常见问题收集</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/常见问题收集/</id>
    <published>2017-10-16T16:00:00.000Z</published>
    <updated>2019-02-06T09:37:58.773Z</updated>
    
    <content type="html"><![CDATA[<p>此文档为使用linux过程中遇到的各种坑，以及跳出坑的方法。</p><h3 id="1-启动时提示-systemd-1-Failed-to-load-SELinux-policy-freezing-无法进入系统"><a href="#1-启动时提示-systemd-1-Failed-to-load-SELinux-policy-freezing-无法进入系统" class="headerlink" title="1. 启动时提示 systemd[1]: Failed to load SELinux policy. freezing. 无法进入系统"></a>1. 启动时提示 systemd[1]: Failed to load SELinux policy. freezing. 无法进入系统</h3><p>此问题为设置错了 SELinux 配置，在启动时按e键修改 grub，在标签 <strong>fi</strong> 内核参数中增加一个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selinux=0</span><br></pre></td></tr></table></figure></p><p>后按 ctrl+x 重启可进入，再修改 ==/etc/selinux/config==<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br><span class="line">SELINUXTYPE=target</span><br></pre></td></tr></table></figure></p><h3 id="2-centos7-端口已开放，也开放了iptables防火墙，还是无法访问"><a href="#2-centos7-端口已开放，也开放了iptables防火墙，还是无法访问" class="headerlink" title="2. centos7 端口已开放，也开放了iptables防火墙，还是无法访问"></a>2. centos7 端口已开放，也开放了iptables防火墙，还是无法访问</h3><p>此问题为 centos7 已默认使用 firewall 为防火墙！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">#禁止防火墙开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">#查看防火墙开放端口</span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line">#开放端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文档为使用linux过程中遇到的各种坑，以及跳出坑的方法。&lt;/p&gt;
&lt;h3 id=&quot;1-启动时提示-systemd-1-Failed-to-load-SELinux-policy-freezing-无法进入系统&quot;&gt;&lt;a href=&quot;#1-启动时提示-systemd-1-F
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git标签</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/Git%E6%A0%87%E7%AD%BE/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/devops/git/Git标签/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2019-02-06T08:42:05.064Z</updated>
    
    <content type="html"><![CDATA[<p>Git 可以对某一时间点上的版本打上标签，经常用于某个软件版本（比如v1.0等）。</p><h4 id="一、列出标签"><a href="#一、列出标签" class="headerlink" title="一、列出标签"></a>一、列出标签</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -l 表示匹配(pattern)1.0.*的标签</span></span><br><span class="line">git tag -l <span class="string">'v1.0.*'</span></span><br></pre></td></tr></table></figure><h4 id="二、新建标签"><a href="#二、新建标签" class="headerlink" title="二、新建标签"></a>二、新建标签</h4><p>Git 的标签分为两类：  </p><ul><li>轻量级(lightweight)的标签，指向特定提交的引用，就像个不会变化的==分支==。</li><li>含附注(annotated)的标签，实际上是存储在仓库中的一个==独立对象==。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无参数默认创建一个轻量级标签</span></span><br><span class="line">git tag v1.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 表示创建一个含附注的标签</span></span><br><span class="line">git tag -a v1.0.1 -m <span class="string">'1.0.1版本'</span></span><br></pre></td></tr></table></figure><h4 id="三、查看标签信息"><a href="#三、查看标签信息" class="headerlink" title="三、查看标签信息"></a>三、查看标签信息</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag show v1.0</span><br></pre></td></tr></table></figure><h4 id="四、签署和验证标签"><a href="#四、签署和验证标签" class="headerlink" title="四、签署和验证标签"></a>四、签署和验证标签</h4><p>使用私钥签署(GPG)标签，需要使用对应公钥进行验证。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -s 使用私钥进行GPG签署</span></span><br><span class="line">git tag -s v1.0 -m <span class="string">'1.0版本'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -v 使用公钥进行验证</span></span><br><span class="line">git tag -v v1.0</span><br></pre></td></tr></table></figure></p><h4 id="五、推送标签到远端仓库"><a href="#五、推送标签到远端仓库" class="headerlink" title="五、推送标签到远端仓库"></a>五、推送标签到远端仓库</h4><p>添加完标签后，需要推送到远程仓库，其他人才能获取到标签信息。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送指定标签</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有标签</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 可以对某一时间点上的版本打上标签，经常用于某个软件版本（比如v1.0等）。&lt;/p&gt;
&lt;h4 id=&quot;一、列出标签&quot;&gt;&lt;a href=&quot;#一、列出标签&quot; class=&quot;headerlink&quot; title=&quot;一、列出标签&quot;&gt;&lt;/a&gt;一、列出标签&lt;/h4&gt;&lt;figure 
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="devops" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/"/>
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/devops/git/"/>
    
    
      <category term="git" scheme="https://joecnn.github.io/wiki-site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>安装Python3</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/%E5%AE%89%E8%A3%85Python3/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/安装Python3/</id>
    <published>2016-01-07T16:00:00.000Z</published>
    <updated>2019-02-06T09:32:51.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装-Python-依赖包"><a href="#1-安装-Python-依赖包" class="headerlink" title="1. 安装 Python 依赖包"></a>1. 安装 Python 依赖包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum groupinstall <span class="string">"Development tools"</span></span><br><span class="line">$ yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h3 id="2-下载-Python3-5-源码包并编译"><a href="#2-下载-Python3-5-源码包并编译" class="headerlink" title="2. 下载 Python3.5 源码包并编译"></a>2. 下载 Python3.5 源码包并编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</span><br><span class="line">$ tar -zxvf Python-3.5.0.taz</span><br><span class="line">$ <span class="built_in">cd</span> Python-3.5.0</span><br></pre></td></tr></table></figure><h3 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span> --<span class="built_in">enable</span>-shared</span><br><span class="line">$ make </span><br><span class="line">$ make install</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><h3 id="4-在运行-Python-前配置需要库"><a href="#4-在运行-Python-前配置需要库" class="headerlink" title="4. 在运行 Python 前配置需要库"></a>4. 在运行 Python 前配置需要库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> /usr/<span class="built_in">local</span>/lib &gt;&gt; /etc/ld.so.conf.d/local.conf</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure><h3 id="5-检测安装"><a href="#5-检测安装" class="headerlink" title="5. 检测安装"></a>5. 检测安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 --version</span><br></pre></td></tr></table></figure><h3 id="6-移除编译-Python-安装的库"><a href="#6-移除编译-Python-安装的库" class="headerlink" title="6. 移除编译 Python 安装的库"></a>6. 移除编译 Python 安装的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum groupremove <span class="string">"Development tools"</span></span><br><span class="line">$ yum remove zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><h3 id="7-设置别名"><a href="#7-设置别名" class="headerlink" title="7. 设置别名"></a>7. 设置别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> py=python3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装-Python-依赖包&quot;&gt;&lt;a href=&quot;#1-安装-Python-依赖包&quot; class=&quot;headerlink&quot; title=&quot;1. 安装 Python 依赖包&quot;&gt;&lt;/a&gt;1. 安装 Python 依赖包&lt;/h3&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网络配置</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/网络配置/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2019-02-06T09:24:25.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-检测是否已启动网卡"><a href="#1-检测是否已启动网卡" class="headerlink" title="1. 检测是否已启动网卡"></a>1. 检测是否已启动网卡</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig &amp; ifup eth0</span><br></pre></td></tr></table></figure><h3 id="2-修改对应网卡配置信息"><a href="#2-修改对应网卡配置信息" class="headerlink" title="2. 修改对应网卡配置信息"></a>2. 修改对应网卡配置信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=&quot;eth0&quot;</span><br><span class="line">HWADDR=&quot;00:0C:29:FD:FF:2A&quot;</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=192.168.1.31</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DNS1=192.168.1.1</span><br></pre></td></tr></table></figure><h3 id="3-重启网卡"><a href="#3-重启网卡" class="headerlink" title="3. 重启网卡"></a>3. 重启网卡</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service network restart  </span><br><span class="line">$ /etc/init.d/network restart</span><br></pre></td></tr></table></figure><h3 id="4-可以安装网络图形设置工具"><a href="#4-可以安装网络图形设置工具" class="headerlink" title="4. 可以安装网络图形设置工具"></a>4. 可以安装网络图形设置工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install setuptool</span><br></pre></td></tr></table></figure><h3 id="5-检测网络状态"><a href="#5-检测网络状态" class="headerlink" title="5. 检测网络状态"></a>5. 检测网络状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service network status</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-检测是否已启动网卡&quot;&gt;&lt;a href=&quot;#1-检测是否已启动网卡&quot; class=&quot;headerlink&quot; title=&quot;1. 检测是否已启动网卡&quot;&gt;&lt;/a&gt;1. 检测是否已启动网卡&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>安装gcc</title>
    <link href="https://joecnn.github.io/wiki-site/wiki/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/%E5%AE%89%E8%A3%85gcc/"/>
    <id>https://joecnn.github.io/wiki-site/wiki/技术开发/linux/安装gcc/</id>
    <published>2016-01-05T16:00:00.000Z</published>
    <updated>2019-02-06T09:28:45.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、安装内核支持gcc"><a href="#一、安装内核支持gcc" class="headerlink" title="一、安装内核支持gcc"></a>一、安装内核支持gcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install gcc+ gcc-c++</span><br></pre></td></tr></table></figure><h3 id="二、手动升级gcc"><a href="#二、手动升级gcc" class="headerlink" title="二、手动升级gcc"></a>二、手动升级gcc</h3><h4 id="1-获取安装包"><a href="#1-获取安装包" class="headerlink" title="1. 获取安装包"></a>1. 获取安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.bz2</span><br><span class="line">$ tar -jxvf gcc-4.8.2.tar.bz2</span><br></pre></td></tr></table></figure><h4 id="2-下载编译需要的依赖项"><a href="#2-下载编译需要的依赖项" class="headerlink" title="2. 下载编译需要的依赖项"></a>2. 下载编译需要的依赖项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gcc-4.8.2</span><br><span class="line">$ ./contrib/down_prerequiesites</span><br></pre></td></tr></table></figure><h4 id="3-建立一个目录供编译输出的文件存放"><a href="#3-建立一个目录供编译输出的文件存放" class="headerlink" title="3. 建立一个目录供编译输出的文件存放"></a>3. 建立一个目录供编译输出的文件存放</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gcc-build-4.8.2</span><br></pre></td></tr></table></figure><h4 id="4-生成-Makefile-文件"><a href="#4-生成-Makefile-文件" class="headerlink" title="4. 生成 Makefile 文件"></a>4. 生成 Makefile 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gcc-build-4.8.2</span><br><span class="line">$ ../configure -<span class="built_in">enable</span>-checking=release -<span class="built_in">enable</span>-languages=c,c++ -<span class="built_in">disable</span>-multilib</span><br></pre></td></tr></table></figure><h4 id="5-编译-j4选项是make对多核处理器的优化"><a href="#5-编译-j4选项是make对多核处理器的优化" class="headerlink" title="5. 编译, -j4选项是make对多核处理器的优化"></a>5. 编译, -j4选项是make对多核处理器的优化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make -j4</span><br><span class="line">$ yum -y install glibc-devel.i686 glibc-devel</span><br></pre></td></tr></table></figure><h4 id="6-安装"><a href="#6-安装" class="headerlink" title="6. 安装"></a>6. 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make install</span><br></pre></td></tr></table></figure><h4 id="7-检查gcc版本"><a href="#7-检查gcc版本" class="headerlink" title="7. 检查gcc版本"></a>7. 检查gcc版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、安装内核支持gcc&quot;&gt;&lt;a href=&quot;#一、安装内核支持gcc&quot; class=&quot;headerlink&quot; title=&quot;一、安装内核支持gcc&quot;&gt;&lt;/a&gt;一、安装内核支持gcc&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="技术开发" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91/linux/"/>
    
    
      <category term="linux" scheme="https://joecnn.github.io/wiki-site/tags/linux/"/>
    
  </entry>
  
</feed>
